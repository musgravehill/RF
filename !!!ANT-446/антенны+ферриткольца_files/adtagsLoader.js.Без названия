var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function () {
    function isMobile() {
        var check = !1;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4)))
                check = !0;
        })(navigator.userAgent);
        return check;
    }
    function unique(length) {
        if (length === void 0) { length = 5; }
        var chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', result = '';
        for (var i = length; i > 0; --i) {
            result += chars[Math.floor(Math.random() * chars.length)];
        }
        return 'AT' + result;
    }
    function getCookie(name) {
        var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, '\\$1') + "=([^;]*)"));
        return matches ? decodeURIComponent(matches[1]) : null;
    }
    function setCookie(name, value, options) {
        options = options || {};
        var expires = options.expires;
        if (typeof expires === 'number' && expires) {
            var d = new Date();
            d.setTime(d.getTime() + expires * 1000);
            expires = options.expires = d;
        }
        if (expires && expires.toUTCString) {
            options.expires = expires.toUTCString();
        }
        value = encodeURIComponent(value);
        var updateCookie = name + '=' + value;
        for (var propName in options) {
            updateCookie += '; ' + propName;
            var propValue = options[propName];
            if (propValue !== !0) {
                updateCookie += "=" + propValue;
            }
        }
        document.cookie = updateCookie;
    }
    var Size = (function () {
        function Size(width, height) {
            this.width = width;
            this.height = height;
        }
        return Size;
    }());
    var User = (function () {
        function User(id) {
            this.id = id;
        }
        return User;
    }());
    var Zone = (function () {
        function Zone(id, size) {
            this.id = id;
            this.size = size;
        }
        return Zone;
    }());
    var DSPMatching = (function () {
        function DSPMatching(id, matchingURL) {
            this.id = id;
            this.matchingURL = matchingURL;
        }
        DSPMatching.prototype.fire = function (userId) {
            (new Image()).src = this.matchingURL.split("${SSP_UID}").join(userId);
        };
        return DSPMatching;
    }());
    var Site = (function () {
        function Site(id, domain, category, bidfloor, allowOnMobile, user) {
            this.id = id;
            this.domain = domain;
            this.category = category;
            this.bidfloor = bidfloor;
            this.allowOnMobile = allowOnMobile === 1;
            this.user = user;
            this.zones = Array();
            this.topframe = 1;
            this.secure = 1;
        }
        Site.prototype.init = function () {
            try {
                this.topframe = window.self !== window.top ? 0 : 1;
            }
            catch (e) {
            }
            if (this.topframe === 1) {
                this.domain = window.location.hostname;
                this.page = window.location.href;
                this.ref = document.referrer.length === 0 ? undefined : document.referrer;
                this.title = document.querySelector('title') === null ? undefined : document.querySelector('title').innerText;
                this.keywords = document.querySelector('meta[name=keywords]') === null ? undefined : document.querySelector('meta[name=keywords]').innerHTML;
            }
            else {
                this.page = document.referrer.length === 0 ? undefined : document.referrer;
            }
            if (window.location.href.indexOf('https://') !== 0) {
                this.secure = 0;
            }
            if (this.user.id === 325) {
                this.secure = 1;
            }
        };
        Site.prototype.addZone = function (zone) {
            this.zones.push(zone);
        };
        return Site;
    }());
    var Container = (function () {
        function Container(elementId, size) {
            this.elementId = elementId;
            this.element = document.getElementById(this.elementId);
            this.size = size;
        }
        Container.prototype.exists = function () {
            return this.element !== null;
        };
        Container.prototype.flush = function () {
            this.element.innerHTML = "";
        };
        Container.prototype.draw = function (code) {
            this.flush();
            var iframe = document.createElement('iframe');
            iframe.style.overflow = 'hidden';
            iframe.style.width = this.size.width + 'px';
            iframe.style.height = this.size.height + 'px';
            iframe.style.border = 'none';
            iframe.style.padding = "0";
            iframe.style.position = 'inline-block';
            iframe.style.backgroundColor = '#fff';
            iframe.style.display = 'inline-block';
            iframe.scrolling = 'no';
            iframe.style.zIndex = '9999';
            iframe.setAttribute('marginwidth', '0');
            iframe.setAttribute('marginheight', '0');
            this.element.style.width = this.place.size.width + 'px';
            this.element.style.height = this.place.size.height + 'px';
            this.element.style.display = "inline-block";
            this.element.style.margin = 0;
            this.element.style.padding = 0;
            iframe.style.marginLeft = ((this.place.size.width - this.size.width) / 2) + "px";
            iframe.style.top = ((this.place.size.height - this.size.height) / 2) + "px";
            this.element.appendChild(iframe);
            iframe.contentDocument.open();
            iframe.contentDocument.write(code);
            iframe.contentDocument.close();
        };
        return Container;
    }());
    var LoadSiteHandlers = (function () {
        function LoadSiteHandlers(id) {
            this.siteId = id;
            this.handlers = Array();
        }
        LoadSiteHandlers.prototype.addHandler = function (handler) {
            this.handlers.push(handler);
        };
        return LoadSiteHandlers;
    }());
    var AdPlace = (function () {
        function AdPlace(tagId, size, container, description) {
            this.tagId = tagId;
            this.state = 0;
            this.size = size;
            this.container = container;
            if (description) {
                this.description = description;
            }
            else {
                this.description = '';
            }
            this.bidfloor = 0;
            this.baseBidFloor = 0;
        }
        AdPlace.prototype.init = function () {
            this.stats.pageLoad();
            this.state = 1;
        };
        AdPlace.prototype.rtbRequestHandler = function (result, cb) {
            var r = [];
            if (typeof result.r !== 'undefined') {
                r = result.r;
            }
            var b = [];
            if (typeof result.b !== 'undefined') {
                b = result.b;
            }
            var t = [];
            if (typeof result.t !== 'undefined') {
                t = result.t;
            }
            var i = [];
            if (typeof result.i !== 'undefined') {
                i = result.i;
            }
            var u = [];
            if (typeof result.u !== 'undefined') {
                u = result.u;
            }
            this.stats.rtbData(r, b, this.getBidfloor(), (typeof result.avgPrice === 'undefined') ? 0 : result.avgPrice, t, i, u, this.app.visitor.countryAlpha3, this.app.device.devicetype, this.size.width + "x" + this.size.height);
            if (typeof result.error !== "undefined") {
                return cb(new Error(result.error));
            }
            else {
                return cb(null, result);
            }
        };
        AdPlace.prototype.getBidfloor = function () {
            if (this.bidfloor > 0) {
                return this.bidfloor;
            }
            else {
                var site = this.app.getSite(this.siteId);
                if (!site) {
                    return 0;
                }
                else {
                    if (site.bidfloor > 0) {
                        return site.bidfloor;
                    }
                    else {
                        return this.baseBidFloor;
                    }
                }
            }
        };
        AdPlace.prototype.rtbRequest = function (cb) {
            var request = new HTTPRequestXHR("https://ssp.adtags.pro/bid", "POST"), self = this;
            var visitor = this.app.visitor, site = this.app.getSite(this.siteId), device = this.app.device;
            var bidRequest = {
                id: unique(12),
                at: 2,
                site: {
                    id: this.siteId + "",
                    domain: site.domain,
                    cat: [site.category],
                    page: site.page,
                    ref: site.ref,
                    publisher: {
                        id: site.user.id + ""
                    },
                    content: {
                        title: site.title,
                        keywords: site.keywords
                    }
                },
                device: {
                    ua: device.userAgent,
                    geo: {
                        country: visitor.countryAlpha3,
                        city: visitor.city,
                        utcoffset: 2,
                        type: 2
                    },
                    dnt: device.dnt,
                    devicetype: device.devicetype,
                    h: device.H,
                    w: device.W,
                    ppi: device.ppi,
                    pxratio: device.pxRatio,
                    js: 1,
                    language: "ru-RU"
                },
                user: {
                    "id": visitor.id
                },
                imp: [{
                        id: "1",
                        banner: {
                            "id": "1",
                            "w": this.size.width,
                            "h": this.size.height,
                            "wmax": this.size.width,
                            "hmax": this.size.height,
                            "wmin": 0,
                            "hmin": 0,
                            "btype": [
                                3,
                                4
                            ],
                            "battr": [
                                1,
                                3,
                                5,
                                6,
                                8,
                                9,
                                10,
                                11,
                                14
                            ],
                            "topframe": site.topframe,
                            "pos": 0
                        },
                        "tagid": this.siteId + "-" + this.size.width + "x" + this.size.height + "-" + this.description,
                        "secure": site.secure,
                        "bidfloorcur": "USD",
                        "bidfloor": this.getBidfloor(),
                        "instl": 0
                    }],
                cur: ["USD"],
                "ext": {
                    "dspUids": visitor.uids
                }
            };
            request.body = JSON.stringify(bidRequest);
            request.responseHandler = function (err, data) {
                if (err) {
                    return cb(err);
                }
                else {
                    self.rtbRequestHandler(data, function (err, bidResponse) {
                        cb(err, bidResponse);
                    });
                }
            };
            request.Do();
        };
        AdPlace.prototype.makeImpression = function (bidResponse) {
            var self = this;
            if (typeof bidResponse.nurl == 'string' && bidResponse.nurl.length > 0) {
                var request = new HTTPRequestXHR(bidResponse.nurl, "GET");
                request.responseHandler = function (err, data) {
                    if (err) {
                        self.stats.nurlError(bidResponse.dspId, bidResponse.p1, bidResponse.p2);
                        if (typeof self.boughtHandler !== 'undefined') {
                            self.boughtHandler(bidResponse.p1);
                        }
                    }
                    else {
                        if (typeof self.boughtHandler !== 'undefined') {
                            self.boughtHandler(bidResponse.p1);
                        }
                        if (typeof data.error !== 'undefined') {
                            self.stats.nurlError(bidResponse.dspId, bidResponse.p1, bidResponse.p2);
                        }
                    }
                };
                request.Do();
            }
            else {
                if (typeof self.boughtHandler !== 'undefined') {
                    self.boughtHandler(bidResponse.p1);
                }
            }
            this.stats.impression(bidResponse.dspId, bidResponse.p1, bidResponse.p2, this.app.visitor.countryAlpha3, this.app.device.devicetype, this.size.width + "x" + this.size.height);
            this.container.draw(bidResponse.code);
        };
        AdPlace.prototype.pmlRequest = function (cb) {
            var site = this.app.getSite(this.siteId);
            if (site.user.id !== 75) {
                return cb(new Error('Publisher blocked'));
            }
            if (typeof this.app.pmlStartByFormats[this.size.width + "x" + this.size.height] !== 'undefined') {
                return cb(new Error('Format has exists'));
            }
            else {
                this.app.pmlStartByFormats[this.size.width + "x" + this.size.height] = true;
            }
            if (this.getBidfloor() > 0.14) {
                return cb(new Error("Bidfloor expensive"));
            }
            var width = null, height = null, pmlid = null, pmlcid = null;
            if (this.size.width === 300 && this.size.height === 250) {
                width = 300;
                height = 250;
                pmlid = 162;
                pmlcid = "rb4id-162";
            }
            else if (this.size.width === 240 && this.size.height === 400) {
                width = 240;
                height = 400;
                pmlid = 22;
                pmlcid = "rb4id-22";
            }
            else if (this.size.width === 728 && this.size.height === 90) {
                width = 728;
                height = 90;
                pmlid = 163;
                pmlcid = "rb4id-163";
            }
            else if (this.size.width === 160 && this.size.height === 600) {
                width = 160;
                height = 600;
                pmlid = 164;
                pmlcid = "rb4id-164";
            }
            else {
                return cb(new Error("Format not found"));
            }
            var divContainer = document.createElement("div");
            divContainer.id = "container-" + pmlcid;
            divContainer.style.display = "none";
            divContainer.style.width = "1px";
            divContainer.style.height = "1px";
            var pmlDiv = document.createElement('div');
            pmlDiv.id = pmlcid;
            divContainer.appendChild(pmlDiv);
            this.container.element.appendChild(divContainer);
            var pmlsrc = document.createElement('script');
            var self = this;
            pmlsrc.src = "//pm.perfmelab.com/static/rb.js";
            pmlsrc.onload = function () {
                window["show_rb"]("//pm.perfmelab.com/jsrb", pmlid, width, height, pmlcid);
                window["perfmelabNo" + pmlcid] = function () {
                    self.container.element.removeChild(divContainer);
                    cb(new Error("Ad not found"));
                };
                window["perfmelabWin" + pmlcid] = function (cpm) {
                    if (typeof cpm === 'string') {
                        cpm = parseFloat(cpm);
                    }
                    if (isNaN(cpm)) {
                        cpm = 0.15;
                    }
                    divContainer.style.width = width + "px";
                    divContainer.style.height = height + "px";
                    divContainer.style.display = "inline-block";
                    self.container.element.style.width = self.size.width + 'px';
                    self.container.element.style.height = self.size.height + 'px';
                    self.container.element.style.display = "inline-block";
                    self.container.element.style.margin = 0;
                    self.container.element.style.padding = 0;
                    for (var i = 0; i < self.container.element.childNodes.length; i++) {
                        var elem = self.container.element.childNodes[i];
                        if (elem.id !== "container-" + pmlcid) {
                            self.container.element.removeChild(elem);
                        }
                    }
                    cb(null, self.getBidfloor(), cpm);
                };
            };
            this.stats.rtbData([5000], [], this.getBidfloor(), 0, [], [], [], this.app.visitor.countryAlpha3, this.app.device.devicetype, this.size.width + "x" + this.size.height);
            document.body.appendChild(pmlsrc);
        };
        return AdPlace;
    }());
    var AdPlaceDelay = (function (_super) {
        __extends(AdPlaceDelay, _super);
        function AdPlaceDelay(tagId, size, container, description, timer, limit) {
            var _this = _super.call(this, tagId, size, container, description) || this;
            _this.baseBidFloor = 0.05;
            if (timer) {
                _this.timer = timer * 1000;
            }
            else {
                _this.timer = 45 * 1000;
            }
            return _this;
        }
        AdPlaceDelay.prototype.init = function () {
            _super.prototype.init.call(this);
            var self = this;
            setTimeout(function () {
                self.stats.scriptLoad();
                var site = self.app.getSite(self.siteId);
                if (site.allowOnMobile === false && isMobile()) {
                }
                else {
                    self.pmlRequest(function (err, result) { });
                    self.rtbRequest(function (err, result) {
                        if (err) {
                            self.app.errorLog.push(err);
                        }
                        else {
                            self.makeImpression(result);
                        }
                    });
                }
            }, this.timer);
        };
        return AdPlaceDelay;
    }(AdPlace));
    var AdPlacePassback = (function (_super) {
        __extends(AdPlacePassback, _super);
        function AdPlacePassback(tagId, size, container, description) {
            var _this = _super.call(this, tagId, size, container, description) || this;
            _this.baseBidFloor = 0.1;
            return _this;
        }
        AdPlacePassback.prototype.callPassback = function () {
        };
        AdPlacePassback.prototype.init = function () {
            var self = this;
            _super.prototype.init.call(this);
            this.stats.scriptLoad();
            var site = this.app.getSite(this.siteId);
            if (site.allowOnMobile === false && isMobile()) {
                this.callPassback();
            }
            else {
                this.rtbRequest(function (err, result) {
                    if (err) {
                        self.app.errorLog.push(err);
                        return self.callPassback();
                    }
                    else {
                        self.makeImpression(result);
                    }
                });
            }
        };
        return AdPlacePassback;
    }(AdPlace));
    var AdPlacePassbackFunc = (function (_super) {
        __extends(AdPlacePassbackFunc, _super);
        function AdPlacePassbackFunc(tagId, size, container, desctiption, passback) {
            var _this = _super.call(this, tagId, size, container, desctiption) || this;
            _this.passback = passback;
            return _this;
        }
        AdPlacePassbackFunc.prototype.callPassback = function () {
            _super.prototype.callPassback.call(this);
            this.passback();
        };
        return AdPlacePassbackFunc;
    }(AdPlacePassback));
    var AdPlacePassbackBase64 = (function (_super) {
        __extends(AdPlacePassbackBase64, _super);
        function AdPlacePassbackBase64(tagId, size, container, desctiption, passback) {
            var _this = _super.call(this, tagId, size, container, desctiption) || this;
            _this.passback = passback;
            return _this;
        }
        AdPlacePassbackBase64.prototype.callPassback = function () {
            var decodedPassback = atob(this.passback);
            this.container.draw(decodedPassback);
        };
        return AdPlacePassbackBase64;
    }(AdPlacePassback));
    var AdPlacePassbackNo = (function (_super) {
        __extends(AdPlacePassbackNo, _super);
        function AdPlacePassbackNo() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AdPlacePassbackNo.prototype.callPassback = function () {
            this.container.element.parentNode.removeChild(this.container.element);
        };
        return AdPlacePassbackNo;
    }(AdPlacePassback));
    var DSPuid = (function () {
        function DSPuid(id, uid) {
            this.dspId = id;
            this.uid = uid;
        }
        return DSPuid;
    }());
    var Device = (function () {
        function Device() {
        }
        Device.prototype.init = function () {
            this.userAgent = window.navigator.userAgent;
            this.dnt = (typeof window.navigator.doNotTrack === 'undefined' || window.navigator.doNotTrack === null) ? 0 : 1;
            this.timezoneOffset = new Date().getTimezoneOffset();
            this.devicetype = isMobile() ? 1 : 2;
            if (typeof window.screen !== 'undefined') {
                this.W = window.screen.width;
                this.H = window.screen.height;
            }
            if (typeof window.devicePixelRatio !== 'undefined') {
                this.pxRatio = window.devicePixelRatio;
                var dPPI = document.createElement('div');
                dPPI.style.width = '1in';
                dPPI.style.height = '1in';
                dPPI.style.left = '-100%';
                dPPI.style.top = '-100%';
                document.body.appendChild(dPPI);
                this.ppi = dPPI.offsetWidth * this.pxRatio;
                dPPI.parentNode.removeChild(dPPI);
            }
            if (typeof navigator.language !== 'undefined') {
                this.language = navigator.language;
            }
        };
        return Device;
    }());
    var Visitor = (function () {
        function Visitor(id) {
            if (id) {
                this.id = id;
            }
            this.uids = Array();
        }
        Visitor.prototype.load = function () {
            this.loadUid();
        };
        Visitor.prototype.loadUid = function () {
            var self = this;
            if (getCookie('at-user-id') !== null && typeof getCookie('at-user-id') === 'string' && getCookie('at-user-id').length !== 0) {
                self.id = getCookie('at-user-id');
                self.loadGeo();
            }
            else {
                var request = new HTTPRequestJSONP('https://matching.adtags.pro/uid.js'), self = this;
                request.responseHandler = function (err, uid) {
                    if (err) {
                        return self.loadDoneHandler(err);
                    }
                    var today = new Date();
                    if (uid.length == 0) {
                        uid = today.getDay() + "-" + unique(10);
                    }
                    self.id = uid;
                    var tomorrow = new Date();
                    tomorrow.setDate(today.getDate() + 15);
                    tomorrow.setHours(0);
                    tomorrow.setMinutes(0);
                    tomorrow.setSeconds(0);
                    setCookie('at-user-id', self.id, {
                        expires: tomorrow
                    });
                    self.loadGeo();
                };
                request.Do();
            }
        };
        Visitor.prototype.loadGeo = function () {
            var self = this;
            if (getCookie('at-country-code-3') !== null && typeof getCookie('at-country-code-3') === 'string' && getCookie('at-country-code-3').length !== 0) {
                this.countryAlpha3 = getCookie('at-country-code-3');
                this.country = getCookie('at-user-country');
                this.city = getCookie('at-user-city');
                return self.loadDSPuids();
            }
            else {
                var request = new HTTPRequestJSONP('https://matching.adtags.pro/geo.js');
                request.responseHandler = function (err, geoData) {
                    if (err) {
                        return self.loadDoneHandler(err);
                    }
                    var today = new Date(), tomorrow = new Date();
                    tomorrow.setDate(today.getDate() + 15);
                    tomorrow.setHours(0);
                    tomorrow.setMinutes(0);
                    tomorrow.setSeconds(0);
                    if (geoData.geo.length != 0) {
                        self.country = geoData.geo;
                        setCookie('at-user-country', self.country, {
                            expires: tomorrow
                        });
                    }
                    if (geoData['country-alpha-3'].length != 0) {
                        self.countryAlpha3 = geoData['country-alpha-3'];
                        setCookie('at-country-code-3', self.countryAlpha3, {
                            expires: tomorrow
                        });
                    }
                    if (geoData['city'].length != 0) {
                        self.city = geoData.city;
                        setCookie('at-user-city', self.city, {
                            expires: tomorrow
                        });
                    }
                    return self.loadDSPuids();
                };
                request.Do();
            }
        };
        Visitor.prototype.loadDSPuids = function () {
            var self = this;
            var request = new HTTPRequestJSONP("https://matching.adtags.pro/dspuids");
            request.responseHandler = function (err, data) {
                if (err) {
                    return self.loadDoneHandler(err);
                }
                for (var dspId in data) {
                    var uid = data[dspId];
                    if (uid.length != 0) {
                        self.uids.push(new DSPuid(dspId, uid));
                    }
                }
                self.loadDoneHandler();
            };
            request.Do();
        };
        return Visitor;
    }());
    var App = (function () {
        function App() {
            this.adPlaces = Array();
            this.sites = Array();
            this.loadSites = Array();
            this.state = 0;
            this.initHandlers = Array();
            this.device = new Device();
            this.matchingPool = Array();
            this.errorLog = Array();
            this.pmlStartByFormats = {};
            this.device.init();
        }
        App.prototype.getSite = function (id) {
            for (var i = 0; i < this.sites.length; i++) {
                if (this.sites[i].id == id) {
                    return this.sites[i];
                }
            }
            return null;
        };
        App.prototype.placeExists = function (id) {
            for (var i = 0; i < this.adPlaces.length; i++) {
                if (this.adPlaces[i].tagId === id) {
                    return true;
                }
            }
            return false;
        };
        App.prototype.addPlace = function (settings, cb) {
            if (typeof settings.domainId === 'undefined') {
                cb(new Error('domainId not found'));
            }
            if (typeof settings.size === 'undefined') {
                cb(new Error('size not found'));
            }
            if (typeof settings.size.width === 'undefined') {
                cb(new Error('size.width not found'));
            }
            if (typeof settings.size.height === 'undefined') {
                cb(new Error('size.height not found'));
            }
            if (typeof settings.tagId === 'undefined') {
                cb(new Error('tagId not found'));
            }
            if (this.placeExists(settings.tagId)) {
                return cb(new Error('this place already added'));
            }
            if (typeof settings.width === 'string') {
                settings.width = parseInt(settings.width);
            }
            if (typeof settings.height === 'string') {
                settings.height = parseInt(settings.height);
            }
            var size = new Size(settings.size.width, settings.size.height), place, container = new Container(settings.tagId, size), placeSize = size;
            if (typeof settings.size.adPlaceWidth !== 'undefined' && typeof settings.size.adPlaceHeight) {
                placeSize.width = settings.size.adPlaceWidth;
                placeSize.height = settings.size.adPlaceHeight;
            }
            if (!container.exists()) {
                cb(new Error('Container ' + container.elementId + ' not found'));
            }
            if (typeof settings.passback === 'undefined') {
                if (typeof settings.startDelay !== 'undefined') {
                    place = new AdPlaceDelay(settings.tagId, placeSize, container, settings.description, settings.startDelay);
                }
                else {
                    place = new AdPlaceDelay(settings.tagId, placeSize, container, settings.description);
                }
            }
            else {
                if (typeof settings.passback === 'string') {
                    place = new AdPlacePassbackBase64(settings.tagId, placeSize, container, settings.description, settings.passback);
                }
                else if (settings.passback === false) {
                    place = new AdPlacePassbackNo(settings.tagId, placeSize, container, settings.description);
                }
                else {
                    place = new AdPlacePassbackFunc(settings.tagId, placeSize, container, settings.description, settings.passback);
                }
            }
            container.place = place;
            if (typeof settings.boughtHandler !== 'undefined') {
                place.boughtHandler = settings.boughtHandler;
            }
            place.siteId = settings.domainId;
            place.app = this;
            if (typeof settings.bidfloor === 'number') {
                place.bidfloor = settings.bidfloor;
            }
            place.stats = new Stats(place);
            this.adPlaces.push(place);
            if (!this.siteExists(settings.domainId)) {
                this.loadSiteData(settings.domainId, function (err) {
                    if (err) {
                        cb(err, place);
                    }
                    else {
                        cb(null, place);
                    }
                });
            }
            else {
                cb(null, place);
            }
        };
        App.prototype.siteExists = function (id) {
            for (var i = 0; i < this.sites.length; i++) {
                if (this.sites[i].id === id) {
                    return true;
                }
            }
            return false;
        };
        App.prototype.loadSiteData = function (id, cb) {
            if (this.loadSites.length > 0) {
                for (var i = 0; i < this.loadSites.length; i++) {
                    if (this.loadSites[i].siteId == id) {
                        this.loadSites[i].addHandler(cb);
                        return;
                    }
                }
            }
            var lSite = new LoadSiteHandlers(id);
            this.loadSites.push(lSite);
            var request = new HTTPRequestXHR('https://data.adtags.pro/setup?id=' + id), self = this;
            request.responseHandler = function (err, siteData) {
                if (err) {
                    for (var i = 0; i < lSite.handlers.length; i++) {
                        lSite.handlers[i](err);
                    }
                    for (var i = 0; i < self.loadSites.length; i++) {
                        if (lSite.siteId == self.loadSites[i].siteId) {
                            delete self.loadSites[i];
                            break;
                        }
                    }
                    cb(err);
                }
                else {
                    if (typeof siteData.error !== 'undefined') {
                        cb(new Error(siteData.error));
                    }
                    else {
                        var user = new User(siteData.user.id);
                        var site = new Site(siteData.id, siteData.domain, siteData.category, siteData.bidfloor, siteData.allowOnMobile, user);
                        if (typeof siteData.zones !== 'undefined') {
                            for (var i = 0; i < siteData.zones.length; i++) {
                                var size = new Size(siteData.zones[i].size.width, siteData.zones[i].size.height);
                                var zone = new Zone(siteData.zones[i].id, size);
                                site.addZone(zone);
                            }
                        }
                        site.init();
                        self.sites.push(site);
                        if (typeof siteData.dsps !== 'undefined') {
                            for (var i = 0; i < siteData.dsps.length; i++) {
                                if (!self.matchingExist(siteData.dsps[i].id)) {
                                    var dspMatch = new DSPMatching(siteData.dsps[i].id, siteData.dsps[i].matchingUrl);
                                    dspMatch.fire(self.visitor.id);
                                    self.matchingPool.push(dspMatch);
                                }
                            }
                        }
                        setTimeout(function () {
                            for (var i = 0; i < lSite.handlers.length; i++) {
                                lSite.handlers[i]();
                            }
                            for (var i = 0; i < self.loadSites.length; i++) {
                                if (lSite.siteId == self.loadSites[i].siteId) {
                                    delete self.loadSites[i];
                                    break;
                                }
                            }
                        }, 1);
                        cb();
                    }
                }
            };
            request.method = 'GET';
            request.Do();
        };
        App.prototype.matchingExist = function (id) {
            for (var i = 0; i < this.matchingPool.length; i++) {
                if (this.matchingPool[i].id === id) {
                    return true;
                }
            }
            return false;
        };
        App.prototype.init = function (cb) {
            var self = this;
            if (this.state == 1) {
                this.initHandlers.push(cb);
            }
            else if (this.state == 0) {
                this.state = 1;
                this.loadVisitorData(function (err) {
                    self.state = 2;
                    setTimeout(function () {
                        for (var j = 0; j < self.initHandlers.length; j++) {
                            setTimeout((function (i) {
                                self.initHandlers[i](err);
                            })(j), 1);
                        }
                    }, 1);
                    cb(err);
                });
            }
        };
        App.prototype.loadVisitorData = function (cb) {
            this.visitor = new Visitor();
            this.visitor.loadDoneHandler = cb;
            this.visitor.load();
        };
        return App;
    }());
    var HTTPRequest = (function () {
        function HTTPRequest(URI) {
            this.URI = URI;
            this.responseSent = false;
            this.timeout = 0;
        }
        return HTTPRequest;
    }());
    var HTTPRequestJSONP = (function (_super) {
        __extends(HTTPRequestJSONP, _super);
        function HTTPRequestJSONP(URI, callbackName) {
            var _this = _super.call(this, URI) || this;
            if (callbackName) {
                _this.callbackName = callbackName;
            }
            else {
                _this.callbackName = unique(16);
            }
            return _this;
        }
        HTTPRequestJSONP.prototype.Do = function () {
            var script = document.createElement('script'), self = this;
            script.src = this.URI.indexOf('?') === -1 ? this.URI + "?callback=" + this.callbackName : this.URI + "&callback=" + this.callbackName;
            script.onload = function () { script.parentNode.removeChild(script); };
            window[this.callbackName] = function (data) {
                if (self.responseSent === false) {
                    self.responseSent = true;
                    self.responseHandler(null, data);
                }
            };
            if (this.timeout !== 0) {
                setTimeout(function () {
                    if (self.responseSent === false) {
                        self.responseSent = true;
                        self.responseHandler(new Error("Timeout"));
                    }
                }, this.timeout);
            }
            document.body.appendChild(script);
        };
        return HTTPRequestJSONP;
    }(HTTPRequest));
    var HTTPRequestXHR = (function (_super) {
        __extends(HTTPRequestXHR, _super);
        function HTTPRequestXHR(URI, method) {
            if (method === void 0) { method = "GET"; }
            var _this = _super.call(this, URI) || this;
            _this.method = method;
            return _this;
        }
        HTTPRequestXHR.prototype.Do = function () {
            var xhr = new XMLHttpRequest(), self = this;
            if (this.timeout === 0) {
                xhr.timeout = this.timeout;
            }
            xhr.addEventListener('timeout', function () {
                if (self.responseSent === false) {
                    self.responseSent = true;
                    self.responseHandler(new Error('Timeout'));
                }
            });
            xhr.addEventListener('error', function () {
                if (self.responseSent === false) {
                    self.responseSent = true;
                    self.responseHandler(new Error('Server error'));
                }
            });
            xhr.addEventListener('abort', function () {
                if (self.responseSent === false) {
                    self.responseSent = true;
                    self.responseHandler(new Error('Server abort connection'));
                }
            });
            xhr.addEventListener('load', function () {
                if (self.responseSent === false) {
                    self.responseSent = true;
                    var resp = xhr.responseText, jsonObj, error;
                    try {
                        jsonObj = JSON.parse(resp);
                    }
                    catch (e) {
                        error = new Error("response parse error");
                    }
                    self.responseHandler(error, jsonObj);
                }
            });
            if (this.method === "GET") {
                xhr.open(this.method, this.URI);
                xhr.send();
            }
            else {
                xhr.open(this.method, this.URI, true);
                xhr.send(this.body);
            }
        };
        return HTTPRequestXHR;
    }(HTTPRequest));
    var Stats = (function () {
        function Stats(place) {
            this.place = place;
        }
        Stats.prototype.send = function (postfix) {
            setTimeout(function () {
                (new Image()).src = 'https://stats.adtags.pro/' + postfix;
            }, 1);
        };
        Stats.prototype.generateKey = function () {
            return "siteId=" + this.place.siteId + "&width=" + this.place.size.width + "&height=" + this.place.size.height + "&descr=" + encodeURIComponent(this.place.description);
        };
        Stats.prototype.pageLoad = function () {
            var data = "pl?" + this.generateKey() + "&cbuster=" + Math.random();
            this.send(data);
        };
        Stats.prototype.scriptLoad = function () {
            var data = "sl?" + this.generateKey() + "&cbuster=" + Math.random();
            this.send(data);
        };
        Stats.prototype.rtbData = function (requests, bids, floor, avgPrice, timeouts, incorrect, underfloor, geo, deviceType, sizeId) {
            var data = "rd?" + this.generateKey() + "&fl=" + floor + "&avg=" + avgPrice;
            for (var i = 0; i < requests.length; i++) {
                data += '&r=' + requests[i];
            }
            for (var i = 0; i < timeouts.length; i++) {
                data += '&t=' + timeouts[i];
            }
            for (var i = 0; i < incorrect.length; i++) {
                data += '&i=' + incorrect[i];
            }
            for (var i = 0; i < underfloor.length; i++) {
                data += '&u=' + underfloor[i];
            }
            for (var i = 0; i < bids.length; i++) {
                data += '&b=' + bids[i];
            }
            data += "&geo=" + geo;
            data += "&deviceType=" + deviceType;
            data += "&size=" + sizeId;
            data += "&cbuster=" + Math.random();
            this.send(data);
        };
        Stats.prototype.impression = function (dspId, p1, p2, geo, devicetype, size) {
            var data = "ri?" + this.generateKey() + "&dspId=" + dspId + "&p1=" + p1 + "&p2=" + p2 + "&geo=" + geo + "&deviceType=" + devicetype + "&size=" + size + "&cbuster=" + Math.random();
            this.send(data);
        };
        Stats.prototype.nurlError = function (dspId, p1, p2) {
            var data = "ne?" + this.generateKey() + "&dspId=" + dspId + "&p1=" + p1 + "&p2=" + p2 + "&cbuster=" + Math.random();
            this.send(data);
        };
        return Stats;
    }());
    window['AdTagsApp'] = App;
})();
function adtagsLoader(id, settings) {
    settings.tagId = id;
    settings.size.width = parseInt(settings.size.width);
    settings.size.height = parseInt(settings.size.height);
    if (typeof window["adtagsapp"] === 'undefined') {
        window["adtagsapp"] = new window["AdTagsApp"]();
    }
    var app = window["adtagsapp"];
    app.init(function (err) {
        if (err) {
            app.errorLog.push(err);
        }
        app.addPlace(settings, function (err, place) {
            if (err && !place) {
                app.errorLog.push(err);
            }
            else if (err && place) {
                app.errorLog.push(err);
                place.callPassback();
            }
            else {
                place.init();
            }
        });
    });
}

